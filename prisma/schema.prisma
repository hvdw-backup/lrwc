// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model ApprovedUsers {
  id       String  @id @default(cuid())
  email    String  @unique @db.VarChar(50)
  redeemed Boolean @default(false)
}

model Post {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(225)
  content   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  Reply     Reply[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Reply {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
  postId    String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  id            String    @id @default(cuid())
  username      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  about         String?   @default("") @db.VarChar(1000)
  Post          Post[]
  Reply         Reply[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// old user password

// model User {
//   id       String  @id @default(cuid())
//   username String  @unique @db.VarChar(50)
//   email    String  @unique @db.VarChar(50)
//   password String  @db.Text
//   About    String? @default("") @db.VarChar(1000)
//   Post     Post[]
//   Reply    Reply[]
// }
